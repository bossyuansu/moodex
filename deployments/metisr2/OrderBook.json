{
  "address": "0xAAD8025e14C94B7264d33B76F0815b610767b5DD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Minimal",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewEntry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transaction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Base",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPTH",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIG_DIGITS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Token",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "addOrderEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "order",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "removeOrderEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb832de1398d3a87a6f733244366f0c15c627113217b2501af5803e3018358083",
  "receipt": {
    "to": null,
    "from": "0x67bE001A254B81Dc44EaB9F5a7C66889a5c009AE",
    "contractAddress": "0xAAD8025e14C94B7264d33B76F0815b610767b5DD",
    "transactionIndex": 0,
    "gasUsed": "9839532",
    "logsBloom": "0x
    "blockHash": "0xc42ced9b3227f0392c39cbe566c7c52c2c0c57be80463c9a70f5e3a293c117c2",
    "transactionHash": "0xb832de1398d3a87a6f733244366f0c15c627113217b2501af5803e3018358083",
    "logs": [],
    "blockNumber": 1253982,
    "cumulativeGasUsed": "9839532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF02Efd44B57d143c38A329dD299683bf24Cf8aE0",
    "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d7f86fa580ddcbbae39e137fc63cf8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Base\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPTH\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIG_DIGITS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"addOrderEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"order\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"removeOrderEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x233d4bb961bc4b1c35f7d040bbb9e23856ed698cb227564c1b0bc084b38225c6\",\"license\":\"MIT\"},\"contracts/MathHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nlibrary MathHelper {\\n\\n\\n    // x^n\\n    function pow (uint x, uint n)\\n    internal pure returns (uint r) {\\n       r = 1.0;\\n       while (n > 0) {\\n           if (n % 2 == 1) {\\n              r *= x;\\n              n -= 1;\\n           } else {\\n              x *= x;\\n              n /= 2;\\n           }\\n       }\\n    }\\n}\\n\",\"keccak256\":\"0x4d9244330b3111cb6aa8b862257f5698c4f9d941a68cff9c0a18540d6227721f\",\"license\":\"MIT\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MathHelper.sol\\\";\\nimport \\\"./IERC20Minimal.sol\\\";\\nimport \\\"./OrderedSet.sol\\\";\\n\\ncontract OrderBook{ \\n\\n   using OrderedSet for OrderedSet.Set;\\n   using OrderedUint256Set for OrderedUint256Set.Set;\\n   event NewEntry(address user, bool isBuy, uint256 price, uint256 amount);\\n   event Transaction(address buyer, address seller, uint256 price, uint256 amount);\\n   uint16 public constant SIG_DIGITS=5;  //# of significant digits\\n   uint16 public constant MAX_DEPTH=100;\\n\\n   uint public maxPrecision;\\n\\n   OrderedUint256Set.Set private buyBook;\\n   OrderedUint256Set.Set private sellBook;\\n\\n   mapping(uint256=>OrderedSet.Set) private theBook;\\n   mapping(address=>mapping(uint256=>uint256)) public amounts;\\n\\n   // latest transaction price\\n   uint256 curPrice;\\n\\n   IERC20Minimal public Base;\\n   IERC20Minimal public Token;\\n\\n   using Counters for Counters.Counter;\\n\\n   Counters.Counter private _tokenIds;\\n\\n   constructor(IERC20Minimal base, IERC20Minimal token) public {\\n      Base = base;\\n      Token = token;\\n      maxPrecision = 0;\\n   }\\n\\n   function order(uint256 price, uint256 amount, bool isBuy) public {\\n      if (isBuy) {\\n         buy(price, amount);\\n      } else {\\n         sell(price, amount);\\n      }\\n   }\\n   function buy(uint256 price, uint256 amount) internal \\n   {\\n      Base.transferFrom(msg.sender, address(this), amount);\\n      uint256 transferAmount = 0;\\n      address user = msg.sender;\\n      // case 1, if the order is below the current market\\n      uint256 tmpPrice = OrderedUint256Set.head(sellBook);\\n      if (price < tmpPrice || tmpPrice == 0) {\\n         addOrderEntry(price, amount, true);\\n      }\\n\\n      address tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n      for (uint256 i=0; i < MAX_DEPTH && amount > 0 && price >= tmpPrice; ++i) \\n      {\\n         uint256 orderAmount = amounts[tmpOwner][tmpPrice];\\n         uint256 txAmount;\\n         if (orderAmount >= amount) { //meaning the current order can fill\\n            txAmount = amount;\\n         } else {\\n            txAmount = orderAmount;\\n         }\\n         amounts[tmpOwner][tmpPrice] -= txAmount;\\n         transferAmount += txAmount;\\n         emit Transaction(tmpOwner, user, tmpPrice, txAmount);\\n         amount -= txAmount;\\n         curPrice = tmpPrice;\\n\\n         if (amounts[tmpOwner][tmpPrice] == 0) {\\n            OrderedSet.remove(theBook[tmpPrice], tmpOwner);\\n            tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            if (tmpOwner == address(0)) {\\n                OrderedUint256Set.remove(sellBook, tmpPrice);\\n                delete theBook[tmpPrice];\\n                tmpPrice = OrderedUint256Set.head(sellBook);\\n                if (tmpPrice == 0) {\\n                   break;\\n                }\\n                tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            }\\n         }\\n      }\\n\\n      if (amount > 0 && (price < tmpPrice || tmpPrice == 0) ) {\\n         addOrderEntry(price, amount, true);\\n      }\\n\\n      Token.transferFrom(address(this), msg.sender, transferAmount);\\n   }\\n\\n   function sell(uint256 price, uint256 amount) internal \\n   {\\n      Token.transferFrom(msg.sender, address(this), amount);\\n      address user = msg.sender;\\n      // case 1, if the order is below the current market\\n      uint256 tmpPrice = OrderedUint256Set.head(buyBook);\\n      uint256 transferAmount = 0;\\n      if (price > tmpPrice || tmpPrice == 0) {\\n         addOrderEntry(price, amount, true);\\n      }\\n\\n      address tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n      for (uint256 i=0; i < MAX_DEPTH && amount > 0 && price <= tmpPrice; ++i) \\n      {\\n         uint256 orderAmount = amounts[tmpOwner][tmpPrice];\\n         uint256 txAmount;\\n         if (orderAmount >= amount) { //meaning the current order can fill\\n            txAmount = amount;\\n         } else {\\n            txAmount = orderAmount;\\n         }\\n         amounts[tmpOwner][tmpPrice] -= txAmount;\\n         emit Transaction(user, tmpOwner, tmpPrice, txAmount);\\n         amount -= txAmount;\\n         transferAmount += txAmount * tmpPrice / 10^18;\\n         curPrice = tmpPrice;\\n\\n         if (amounts[tmpOwner][tmpPrice] == 0) {\\n            OrderedSet.remove(theBook[tmpPrice], tmpOwner);\\n            tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            if (tmpOwner == address(0)) {\\n                OrderedUint256Set.remove(buyBook, tmpPrice);\\n                delete theBook[tmpPrice];\\n                tmpPrice = OrderedUint256Set.head(buyBook);\\n                if (tmpPrice == 0) {\\n                   break;\\n                }\\n                tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            }\\n         }\\n      }\\n\\n      if (amount > 0 && (price > tmpPrice || tmpPrice == 0) ) {\\n         addOrderEntry(price, amount, false);\\n      }\\n      Base.transferFrom(address(this), msg.sender, transferAmount);\\n   }\\n\\n   function removeOrderEntry(uint256 price) public {\\n      require(amounts[msg.sender][price] > 0, \\\"invalid order amount\\\");\\n      OrderedSet.remove(theBook[price], msg.sender);\\n      if (OrderedSet.head(theBook[price]) == address(0)) {\\n         if (price <= OrderedUint256Set.head(buyBook)) {\\n            OrderedUint256Set.remove(buyBook, price);\\n         } else {\\n            OrderedUint256Set.remove(sellBook, price);\\n         }\\n\\n         delete theBook[price];\\n      }\\n   }\\n   function addOrderEntry(uint256 price, uint256 amount, bool isBuy) public {\\n      uint256 prevPrice = 0;\\n      if (maxPrecision != 0) {\\n         uint length = bytes(uint2str(price)).length;\\n         require(length > maxPrecision, \\\"the price is too granular\\\");\\n         price -= price % MathHelper.pow(10, maxPrecision);\\n      }\\n\\n      require(price > 0, \\\"price cannot be zero\\\");\\n      if (isBuy) {\\n         uint256 tmpPrice = OrderedUint256Set.head(buyBook);\\n         for (uint i = 0; price > tmpPrice && tmpPrice != 0; ++i) {\\n            require (i < MAX_DEPTH, \\\"The order is too deep\\\");\\n            prevPrice = tmpPrice;\\n            tmpPrice = buyBook.next[tmpPrice];\\n         }\\n         if (price != tmpPrice) {\\n            OrderedUint256Set._insert(buyBook, prevPrice, price, tmpPrice);\\n         }\\n\\n         OrderedSet.append(theBook[price], msg.sender);\\n         amounts[msg.sender][price] += amount;\\n\\n         uint tmpLength = bytes(uint2str(OrderedUint256Set.head(buyBook))).length;\\n         if (tmpLength > SIG_DIGITS) {\\n            maxPrecision = tmpLength - SIG_DIGITS; \\n         }\\n      } else {\\n         uint256 tmpPrice = OrderedUint256Set.head(sellBook);\\n         for (uint i = 0; price < tmpPrice && tmpPrice != 0; ++i) {\\n            require (i < MAX_DEPTH, \\\"The order is too deep\\\");\\n            prevPrice = tmpPrice;\\n            tmpPrice = sellBook.next[tmpPrice];\\n         }\\n         if (price != tmpPrice) {\\n            OrderedUint256Set._insert(sellBook, prevPrice, price, tmpPrice);\\n         }\\n\\n         OrderedSet.append(theBook[price], msg.sender);\\n         amounts[msg.sender][price] += amount;\\n         uint tmpLength = bytes(uint2str(OrderedUint256Set.head(sellBook))).length;\\n         if (tmpLength > SIG_DIGITS) {\\n            maxPrecision = tmpLength - SIG_DIGITS; \\n         }\\n      }\\n   }\\n\\n   function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n   function str2uint(string memory s) internal pure returns (uint) {\\n      bytes memory b = bytes(s);\\n      uint result = 0;\\n      for (uint i = 0; i < b.length; i++) { \\n         if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n            result = result * 10 + (uint8(b[i]) - 48); \\n         }\\n      }\\n      return result;\\n   }\\n}\\n\",\"keccak256\":\"0x4b51c06de6f0666dfd0a28065e8406e8d1a5b8bb97eba5bd89f3689d0e2914b9\",\"license\":\"MIT\"},\"contracts/OrderedSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title OrderedSet\\n * @dev Data structure. It has the properties of a mapping for addresses, but members are ordered\\n * and can be enumerated. Items can be inserted only at the head or the tail, but can be removed\\n * from anywhere. Append, prepend, remove and contains are O(1). Length and enumerate O(N). InsertAfter\\n * and insertBefore could be implemented at O(1).\\n * @author Alberto Cuesta Ca\\u00f1ada\\n */\\nlibrary OrderedSet {\\n\\n    event ItemInserted(address prev, address inserted, address next);\\n    event ItemRemoved(address removed);\\n\\n    struct Set {\\n        mapping (address => address) next;\\n        mapping (address => address) prev;\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new tail.\\n     */\\n    function append(Set storage set, address item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            tail(set),\\n            item,\\n            address(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new head.\\n     */\\n    function prepend(Set storage set, address item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            address(0),\\n            item,\\n            head(set)\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove an item.\\n     */\\n    function remove(Set storage set, address item)\\n        internal\\n    {\\n        require(\\n            item != address(0),\\n            \\\"OrderedSet: Cannot remove the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == true,\\n            \\\"OrderedSet: Cannot remove a non existing item\\\"\\n        );\\n        set.next[set.prev[item]] = set.next[item];\\n        set.prev[set.next[item]] = set.prev[item];\\n        delete set.next[item];\\n        delete set.prev[item];\\n        emit ItemRemoved(item);\\n    }\\n\\n    /**\\n     * @dev Returns the Head.\\n     */\\n    function head(Set storage set)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return set.next[address(0)];\\n    }\\n\\n    /**\\n     * @dev Returns the Tail.\\n     */\\n    function tail(Set storage set)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return set.prev[address(0)];\\n    }\\n\\n    /**\\n     * @dev Returns true if the item is in the set.\\n     */\\n    function contains(Set storage set, address item)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return head(set) == item ||\\n            set.next[item] != address(0) ||\\n            set.prev[item] != address(0);\\n    }\\n\\n    /**\\n     * @dev Return the number of items in the set.\\n     */\\n    function length(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count = 0;\\n        address item = head(set);\\n        while (item != address(0)) {\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Return an array with all items in the set, from Head to Tail.\\n     */\\n    function enumerate(Set storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory items = new address[](length(set));\\n        uint256 count = 0;\\n        address item = head(set);\\n        while (item != address(0)) {\\n            items[count] = item;\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return items;\\n    }\\n\\n    /**\\n     * @dev Insert an item between another two..\\n     */\\n    function _insert(\\n        Set storage set,\\n        address prev_,\\n        address item,\\n        address next_\\n    )\\n        private\\n    {\\n        require(\\n            item != address(0),\\n            \\\"OrderedSet: Cannot insert the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == false,\\n            \\\"OrderedSet: Cannot insert an existing item\\\"\\n        );\\n        set.next[prev_] = item;\\n        set.next[item] = next_;\\n        set.prev[next_] = item;\\n        set.prev[item] = prev_;\\n        emit ItemInserted(prev_, item, next_);\\n    }\\n}\\n\\n/**\\n * @title OrderedUint256Set\\n * @dev Data structure. It has the properties of a mapping for addresses, but members are ordered\\n * and can be enumerated. Items can be inserted only at the head or the tail, but can be removed\\n * from anywhere. Append, prepend, remove and contains are O(1). Length and enumerate O(N). InsertAfter\\n * and insertBefore could be implemented at O(1).\\n * @author Alberto Cuesta Ca\\u00f1ada\\n */\\nlibrary OrderedUint256Set {\\n\\n    event ItemInserted(uint256 prev, uint256 inserted, uint256 next);\\n    event ItemRemoved(uint256 removed);\\n\\n    struct Set {\\n        mapping (uint256 => uint256) next;\\n        mapping (uint256 => uint256) prev;\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new tail.\\n     */\\n    function append(Set storage set, uint256 item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            tail(set),\\n            item,\\n            uint256(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new head.\\n     */\\n    function prepend(Set storage set, uint256 item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            uint256(0),\\n            item,\\n            head(set)\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove an item.\\n     */\\n    function remove(Set storage set, uint256 item)\\n        internal\\n    {\\n        require(\\n            item != uint256(0),\\n            \\\"OrderedSet: Cannot remove the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == true,\\n            \\\"OrderedSet: Cannot remove a non existing item\\\"\\n        );\\n        set.next[set.prev[item]] = set.next[item];\\n        set.prev[set.next[item]] = set.prev[item];\\n        delete set.next[item];\\n        delete set.prev[item];\\n        emit ItemRemoved(item);\\n    }\\n\\n    /**\\n     * @dev Returns the Head.\\n     */\\n    function head(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.next[uint256(0)];\\n    }\\n\\n    /**\\n     * @dev Returns the Tail.\\n     */\\n    function tail(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.prev[uint256(0)];\\n    }\\n\\n    /**\\n     * @dev Returns true if the item is in the set.\\n     */\\n    function contains(Set storage set, uint256 item)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return head(set) == item ||\\n            set.next[item] != uint256(0) ||\\n            set.prev[item] != uint256(0);\\n    }\\n\\n    /**\\n     * @dev Return the number of items in the set.\\n     */\\n    function length(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count = 0;\\n        uint256 item = head(set);\\n        while (item != uint256(0)) {\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Return an array with all items in the set, from Head to Tail.\\n     */\\n    function enumerate(Set storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory items = new uint256[](length(set));\\n        uint256 count = 0;\\n        uint256 item = head(set);\\n        while (item != uint256(0)) {\\n            items[count] = item;\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return items;\\n    }\\n\\n    /**\\n     * @dev Insert an item between another two..\\n     */\\n    function _insert(\\n        Set storage set,\\n        uint256 prev_,\\n        uint256 item,\\n        uint256 next_\\n    )\\n       internal \\n    {\\n        require(\\n            item != uint256(0),\\n            \\\"OrderedSet: Cannot insert the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == false,\\n            \\\"OrderedSet: Cannot insert an existing item\\\"\\n        );\\n        set.next[prev_] = item;\\n        set.next[item] = next_;\\n        set.prev[next_] = item;\\n        set.prev[item] = prev_;\\n        emit ItemInserted(prev_, item, next_);\\n    }\\n}\\n\",\"keccak256\":\"0x763bf4e83c5440cb5b882ce3857594513f883f54db59ac44d49907a14dd8b70f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161167038038061167083398101604081905261002f91610080565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055600080556100b3565b80516001600160a01b038116811461007b57600080fd5b919050565b6000806040838503121561009357600080fd5b61009c83610064565b91506100aa60208401610064565b90509250929050565b6115ae806100c26000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a27154ba11610066578063a27154ba1461010b578063bbf6cd7414610113578063c24126761461012a578063dfbf8b161461013d578063fc642d801461016857600080fd5b80631e4ed674146100985780633aa47297146100b857806347d18577146100cd5780635ea102b0146100e0575b600080fd5b6100a0600581565b60405161ffff90911681526020015b60405180910390f35b6100cb6100c6366004611232565b61017b565b005b6100cb6100db36600461126b565b61019a565b6008546100f3906001600160a01b031681565b6040516001600160a01b0390911681526020016100af565b6100a0606481565b61011c60005481565b6040519081526020016100af565b6009546100f3906001600160a01b031681565b61011c61014b366004611284565b600660209081526000928352604080842090915290825290205481565b6100cb610176366004611232565b610283565b80156101905761018b83836105d3565b505050565b61018b838361092e565b3360009081526006602090815260408083208484529091529020546101fd5760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081bdc99195c88185b5bdd5b9d60621b60448201526064015b60405180910390fd5b60008181526005602052604090206102159033610c45565b600081815260056020526040812061022c90610d40565b6001600160a01b031614156102805760008052600160205260008051602061153983398151915254811161026a57610265600182610d5c565b610275565b610275600382610d5c565b600081905260056020525b50565b600080541561031057600061029785610e13565b51905060005481116102eb5760405162461bcd60e51b815260206004820152601960248201527f74686520707269636520697320746f6f206772616e756c61720000000000000060448201526064016101f4565b6102f8600a600054610f3c565b61030290866112d2565b61030c90866112fc565b9450505b600084116103575760405162461bcd60e51b815260206004820152601460248201527370726963652063616e6e6f74206265207a65726f60601b60448201526064016101f4565b8115610497576000808052600160205260008051602061153983398151915254905b818611801561038757508115155b156103f657606481106103d45760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016101f4565b6000828152600160205260409020549192506103ef81611313565b9050610379565b5080851461040b5761040b6001838784610f93565b60008581526005602052604090206104239033611050565b3360009081526006602090815260408083208884529091528120805486929061044d90849061132e565b9091555050600080805260016020526000805160206115398339815191525461047590610e13565b51905060058111156104905761048c6005826112fc565b6000555b50506105cd565b6000808052600360205260008051602061155983398151915254905b81861080156104c157508115155b15610530576064811061050e5760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016101f4565b60008281526003602052604090205491925061052981611313565b90506104b3565b50808514610545576105456003838784610f93565b600085815260056020526040902061055d9033611050565b3360009081526006602090815260408083208884529091528120805486929061058790849061132e565b909155505060008080526003602052600080516020611559833981519152546105af90610e13565b51905060058111156105ca576105c66005826112fc565b6000555b50505b50505050565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061060790339030908690600401611346565b602060405180830381600087803b15801561062157600080fd5b505af1158015610635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610659919061136a565b506000808052600360205260008051602061155983398151915254339080851080610682575080155b156106935761069385856001610283565b60008181526005602052604081206106aa90610d40565b905060005b6064811080156106bf5750600086115b80156106cb5750828710155b15610876576001600160a01b038216600090815260066020908152604080832086845290915281205490878210610703575086610706565b50805b6001600160a01b0384166000908152600660209081526040808320888452909152812080548392906107399084906112fc565b909155506107499050818861132e565b604080516001600160a01b03808816825289166020820152908101879052606081018390529097507ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a16107a881896112fc565b60078690556001600160a01b03851660009081526006602090815260408083208984529091529020549098506108635760008581526005602052604090206107f09085610c45565b600085815260056020526040902061080790610d40565b93506001600160a01b03841661086357610822600386610d5c565b60008052600360205260008051602061155983398151915254945084610849575050610876565b600085815260056020526040902061086090610d40565b93505b50508061086f90611313565b90506106af565b5060008511801561088e57508186108061088e575081155b1561089f5761089f86866001610283565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906108d390309033908990600401611346565b602060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061136a565b50505050505050565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061096290339030908690600401611346565b602060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b4919061136a565b5060008080526001602052600080516020611539833981519152543391818511806109dd575081155b156109ee576109ee85856001610283565b6000828152600560205260408120610a0590610d40565b905060005b606481108015610a1a5750600086115b8015610a265750838711155b15610be8576001600160a01b038216600090815260066020908152604080832087845290915281205490878210610a5e575086610a61565b50805b6001600160a01b038416600090815260066020908152604080832089845290915281208054839290610a949084906112fc565b9091555050604080516001600160a01b03808a16825286166020820152908101879052606081018290527ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a1610af581896112fc565b9750600a610b038783611387565b610b0d91906113a6565b610b1a906012188661132e565b60078790556001600160a01b03851660009081526006602090815260408083208a8452909152902054909550610bd5576000868152600560205260409020610b629085610c45565b6000868152600560205260409020610b7990610d40565b93506001600160a01b038416610bd557610b94600187610d5c565b60008052600160205260008051602061153983398151915254955085610bbb575050610be8565b6000868152600560205260409020610bd290610d40565b93505b505080610be190611313565b9050610a0a565b50600085118015610c00575082861180610c00575082155b15610c1157610c1186866000610283565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906108d390309033908790600401611346565b6001600160a01b038116610c6b5760405162461bcd60e51b81526004016101f4906113ba565b610c75828261107c565b1515600114610c965760405162461bcd60e51b81526004016101f490611405565b6001600160a01b038181166000818152602085815260408083208054600189018085528386208054891687528a86528487208054938a166001600160a01b0319948516179055805484548a16885291865284872080549290991691831691909117909755938590528054841690558454909216909355519081527ff4bab09e0bfc491adb818cac1805d51def9f0ec39825ffb0e42aeaa46494efce91015b60405180910390a15050565b600080805260209190915260409020546001600160a01b031690565b80610d795760405162461bcd60e51b81526004016101f4906113ba565b610d8382826110ec565b1515600114610da45760405162461bcd60e51b81526004016101f490611405565b60008181526020838152604080832080546001870180855283862080548752888652848720839055805492875290855283862091909155858552908490559290925590518281527fa54eda4149a0fb9258911733973ecf1f6762357ed371fc6d1e63123bbce23bed9101610d34565b606081610e375750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e615780610e4b81611313565b9150610e5a9050600a836113a6565b9150610e3b565b60008167ffffffffffffffff811115610e7c57610e7c611452565b6040519080825280601f01601f191660200182016040528015610ea6576020820181803683370190505b509050815b8515610f3357610ebc6001826112fc565b90506000610ecb600a886113a6565b610ed690600a611387565b610ee090886112fc565b610eeb906030611468565b905060008160f81b905080848481518110610f0857610f0861148d565b60200101906001600160f81b031916908160001a905350610f2a600a896113a6565b97505050610eab565b50949350505050565b60015b8115610f8d57610f506002836112d2565b60011415610f7657610f628382611387565b9050610f6f6001836112fc565b9150610f3f565b610f808380611387565b9250610f6f6002836113a6565b92915050565b81610fb05760405162461bcd60e51b81526004016101f4906114a3565b610fba84836110ec565b15610fd75760405162461bcd60e51b81526004016101f4906114ee565b6000838152602085815260408083208590558483528083208490558383526001870182528083208590558483529182902085905581518581529081018490529081018290527f9472b5ff40cc3a3b93e125bc459af0b3415681e38a54902660ed54d8d105eecf906060015b60405180910390a150505050565b60008080526001830160205260409020546110789083906001600160a01b0316836000611134565b5050565b6000816001600160a01b031661109184610d40565b6001600160a01b031614806110bf57506001600160a01b038281166000908152602085905260409020541615155b806110e557506001600160a01b0382811660009081526001850160205260409020541615155b9392505050565b600080805260208390526040812054821480611115575060008281526020849052604090205415155b806110e557505060009081526001919091016020526040902054151590565b6001600160a01b03821661115a5760405162461bcd60e51b81526004016101f4906114a3565b611164848361107c565b156111815760405162461bcd60e51b81526004016101f4906114ee565b6001600160a01b0383811660008181526020878152604080832080548887166001600160a01b0319918216811790925581855282852080549789169782168817905586855260018b018452828520805482168317905581855293829020805490941685179093558051938452908301919091528101919091527f5c1aff99e7fa2e4a6b70e175249efcb3fbf80573704b56c6379d05dffea9f83890606001611042565b801515811461028057600080fd5b60008060006060848603121561124757600080fd5b8335925060208401359150604084013561126081611224565b809150509250925092565b60006020828403121561127d57600080fd5b5035919050565b6000806040838503121561129757600080fd5b82356001600160a01b03811681146112ae57600080fd5b946020939093013593505050565b634e487b7160e01b600052601260045260246000fd5b6000826112e1576112e16112bc565b500690565b634e487b7160e01b600052601160045260246000fd5b60008282101561130e5761130e6112e6565b500390565b6000600019821415611327576113276112e6565b5060010190565b60008219821115611341576113416112e6565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561137c57600080fd5b81516110e581611224565b60008160001904831182151516156113a1576113a16112e6565b500290565b6000826113b5576113b56112bc565b500490565b6020808252602b908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602d908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652061206e6f6e2060408201526c6578697374696e67206974656d60981b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168060ff03821115611485576114856112e6565b019392505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f4f7264657265645365743a2043616e6e6f7420696e736572742074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602a908201527f4f7264657265645365743a2043616e6e6f7420696e7365727420616e206578696040820152697374696e67206974656d60b01b60608201526080019056fea6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb493617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92effa26469706673582212201a725e2a34f53b81fde5e3abb422e96291113edcde9ee7e4ef24a280daf4b7bf64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a27154ba11610066578063a27154ba1461010b578063bbf6cd7414610113578063c24126761461012a578063dfbf8b161461013d578063fc642d801461016857600080fd5b80631e4ed674146100985780633aa47297146100b857806347d18577146100cd5780635ea102b0146100e0575b600080fd5b6100a0600581565b60405161ffff90911681526020015b60405180910390f35b6100cb6100c6366004611232565b61017b565b005b6100cb6100db36600461126b565b61019a565b6008546100f3906001600160a01b031681565b6040516001600160a01b0390911681526020016100af565b6100a0606481565b61011c60005481565b6040519081526020016100af565b6009546100f3906001600160a01b031681565b61011c61014b366004611284565b600660209081526000928352604080842090915290825290205481565b6100cb610176366004611232565b610283565b80156101905761018b83836105d3565b505050565b61018b838361092e565b3360009081526006602090815260408083208484529091529020546101fd5760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081bdc99195c88185b5bdd5b9d60621b60448201526064015b60405180910390fd5b60008181526005602052604090206102159033610c45565b600081815260056020526040812061022c90610d40565b6001600160a01b031614156102805760008052600160205260008051602061153983398151915254811161026a57610265600182610d5c565b610275565b610275600382610d5c565b600081905260056020525b50565b600080541561031057600061029785610e13565b51905060005481116102eb5760405162461bcd60e51b815260206004820152601960248201527f74686520707269636520697320746f6f206772616e756c61720000000000000060448201526064016101f4565b6102f8600a600054610f3c565b61030290866112d2565b61030c90866112fc565b9450505b600084116103575760405162461bcd60e51b815260206004820152601460248201527370726963652063616e6e6f74206265207a65726f60601b60448201526064016101f4565b8115610497576000808052600160205260008051602061153983398151915254905b818611801561038757508115155b156103f657606481106103d45760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016101f4565b6000828152600160205260409020549192506103ef81611313565b9050610379565b5080851461040b5761040b6001838784610f93565b60008581526005602052604090206104239033611050565b3360009081526006602090815260408083208884529091528120805486929061044d90849061132e565b9091555050600080805260016020526000805160206115398339815191525461047590610e13565b51905060058111156104905761048c6005826112fc565b6000555b50506105cd565b6000808052600360205260008051602061155983398151915254905b81861080156104c157508115155b15610530576064811061050e5760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016101f4565b60008281526003602052604090205491925061052981611313565b90506104b3565b50808514610545576105456003838784610f93565b600085815260056020526040902061055d9033611050565b3360009081526006602090815260408083208884529091528120805486929061058790849061132e565b909155505060008080526003602052600080516020611559833981519152546105af90610e13565b51905060058111156105ca576105c66005826112fc565b6000555b50505b50505050565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061060790339030908690600401611346565b602060405180830381600087803b15801561062157600080fd5b505af1158015610635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610659919061136a565b506000808052600360205260008051602061155983398151915254339080851080610682575080155b156106935761069385856001610283565b60008181526005602052604081206106aa90610d40565b905060005b6064811080156106bf5750600086115b80156106cb5750828710155b15610876576001600160a01b038216600090815260066020908152604080832086845290915281205490878210610703575086610706565b50805b6001600160a01b0384166000908152600660209081526040808320888452909152812080548392906107399084906112fc565b909155506107499050818861132e565b604080516001600160a01b03808816825289166020820152908101879052606081018390529097507ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a16107a881896112fc565b60078690556001600160a01b03851660009081526006602090815260408083208984529091529020549098506108635760008581526005602052604090206107f09085610c45565b600085815260056020526040902061080790610d40565b93506001600160a01b03841661086357610822600386610d5c565b60008052600360205260008051602061155983398151915254945084610849575050610876565b600085815260056020526040902061086090610d40565b93505b50508061086f90611313565b90506106af565b5060008511801561088e57508186108061088e575081155b1561089f5761089f86866001610283565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906108d390309033908990600401611346565b602060405180830381600087803b1580156108ed57600080fd5b505af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061136a565b50505050505050565b6009546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061096290339030908690600401611346565b602060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b4919061136a565b5060008080526001602052600080516020611539833981519152543391818511806109dd575081155b156109ee576109ee85856001610283565b6000828152600560205260408120610a0590610d40565b905060005b606481108015610a1a5750600086115b8015610a265750838711155b15610be8576001600160a01b038216600090815260066020908152604080832087845290915281205490878210610a5e575086610a61565b50805b6001600160a01b038416600090815260066020908152604080832089845290915281208054839290610a949084906112fc565b9091555050604080516001600160a01b03808a16825286166020820152908101879052606081018290527ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a1610af581896112fc565b9750600a610b038783611387565b610b0d91906113a6565b610b1a906012188661132e565b60078790556001600160a01b03851660009081526006602090815260408083208a8452909152902054909550610bd5576000868152600560205260409020610b629085610c45565b6000868152600560205260409020610b7990610d40565b93506001600160a01b038416610bd557610b94600187610d5c565b60008052600160205260008051602061153983398151915254955085610bbb575050610be8565b6000868152600560205260409020610bd290610d40565b93505b505080610be190611313565b9050610a0a565b50600085118015610c00575082861180610c00575082155b15610c1157610c1186866000610283565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906108d390309033908790600401611346565b6001600160a01b038116610c6b5760405162461bcd60e51b81526004016101f4906113ba565b610c75828261107c565b1515600114610c965760405162461bcd60e51b81526004016101f490611405565b6001600160a01b038181166000818152602085815260408083208054600189018085528386208054891687528a86528487208054938a166001600160a01b0319948516179055805484548a16885291865284872080549290991691831691909117909755938590528054841690558454909216909355519081527ff4bab09e0bfc491adb818cac1805d51def9f0ec39825ffb0e42aeaa46494efce91015b60405180910390a15050565b600080805260209190915260409020546001600160a01b031690565b80610d795760405162461bcd60e51b81526004016101f4906113ba565b610d8382826110ec565b1515600114610da45760405162461bcd60e51b81526004016101f490611405565b60008181526020838152604080832080546001870180855283862080548752888652848720839055805492875290855283862091909155858552908490559290925590518281527fa54eda4149a0fb9258911733973ecf1f6762357ed371fc6d1e63123bbce23bed9101610d34565b606081610e375750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e615780610e4b81611313565b9150610e5a9050600a836113a6565b9150610e3b565b60008167ffffffffffffffff811115610e7c57610e7c611452565b6040519080825280601f01601f191660200182016040528015610ea6576020820181803683370190505b509050815b8515610f3357610ebc6001826112fc565b90506000610ecb600a886113a6565b610ed690600a611387565b610ee090886112fc565b610eeb906030611468565b905060008160f81b905080848481518110610f0857610f0861148d565b60200101906001600160f81b031916908160001a905350610f2a600a896113a6565b97505050610eab565b50949350505050565b60015b8115610f8d57610f506002836112d2565b60011415610f7657610f628382611387565b9050610f6f6001836112fc565b9150610f3f565b610f808380611387565b9250610f6f6002836113a6565b92915050565b81610fb05760405162461bcd60e51b81526004016101f4906114a3565b610fba84836110ec565b15610fd75760405162461bcd60e51b81526004016101f4906114ee565b6000838152602085815260408083208590558483528083208490558383526001870182528083208590558483529182902085905581518581529081018490529081018290527f9472b5ff40cc3a3b93e125bc459af0b3415681e38a54902660ed54d8d105eecf906060015b60405180910390a150505050565b60008080526001830160205260409020546110789083906001600160a01b0316836000611134565b5050565b6000816001600160a01b031661109184610d40565b6001600160a01b031614806110bf57506001600160a01b038281166000908152602085905260409020541615155b806110e557506001600160a01b0382811660009081526001850160205260409020541615155b9392505050565b600080805260208390526040812054821480611115575060008281526020849052604090205415155b806110e557505060009081526001919091016020526040902054151590565b6001600160a01b03821661115a5760405162461bcd60e51b81526004016101f4906114a3565b611164848361107c565b156111815760405162461bcd60e51b81526004016101f4906114ee565b6001600160a01b0383811660008181526020878152604080832080548887166001600160a01b0319918216811790925581855282852080549789169782168817905586855260018b018452828520805482168317905581855293829020805490941685179093558051938452908301919091528101919091527f5c1aff99e7fa2e4a6b70e175249efcb3fbf80573704b56c6379d05dffea9f83890606001611042565b801515811461028057600080fd5b60008060006060848603121561124757600080fd5b8335925060208401359150604084013561126081611224565b809150509250925092565b60006020828403121561127d57600080fd5b5035919050565b6000806040838503121561129757600080fd5b82356001600160a01b03811681146112ae57600080fd5b946020939093013593505050565b634e487b7160e01b600052601260045260246000fd5b6000826112e1576112e16112bc565b500690565b634e487b7160e01b600052601160045260246000fd5b60008282101561130e5761130e6112e6565b500390565b6000600019821415611327576113276112e6565b5060010190565b60008219821115611341576113416112e6565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561137c57600080fd5b81516110e581611224565b60008160001904831182151516156113a1576113a16112e6565b500290565b6000826113b5576113b56112bc565b500490565b6020808252602b908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602d908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652061206e6f6e2060408201526c6578697374696e67206974656d60981b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168060ff03821115611485576114856112e6565b019392505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f4f7264657265645365743a2043616e6e6f7420696e736572742074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602a908201527f4f7264657265645365743a2043616e6e6f7420696e7365727420616e206578696040820152697374696e67206974656d60b01b60608201526080019056fea6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb493617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92effa26469706673582212201a725e2a34f53b81fde5e3abb422e96291113edcde9ee7e4ef24a280daf4b7bf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 984,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "maxPrecision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 987,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "buyBook",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Set)2433_storage"
      },
      {
        "astId": 990,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "sellBook",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Set)2433_storage"
      },
      {
        "astId": 995,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "theBook",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Set)2044_storage)"
      },
      {
        "astId": 1001,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "amounts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1003,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "curPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1006,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "Base",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20Minimal)893"
      },
      {
        "astId": 1009,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "Token",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20Minimal)893"
      },
      {
        "astId": 1016,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)514_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Minimal)893": {
        "encoding": "inplace",
        "label": "contract IERC20Minimal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Set)2044_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderedSet.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)2044_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)514_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 513,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)2044_storage": {
        "encoding": "inplace",
        "label": "struct OrderedSet.Set",
        "members": [
          {
            "astId": 2039,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 2043,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "prev",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2433_storage": {
        "encoding": "inplace",
        "label": "struct OrderedUint256Set.Set",
        "members": [
          {
            "astId": 2428,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2432,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "prev",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}