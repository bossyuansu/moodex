{
  "address": "0x934d6215B427feb67AB700d62228e2e60C8C9cE8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bDecimals",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Minimal",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewEntry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transaction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Base",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEPTH",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_DECIMAL",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIG_DIGITS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Token",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "baseAmountByPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "isBuys",
          "type": "bool[]"
        }
      ],
      "name": "batchOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "name": "enumerateBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leftoverBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leftoverToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "normalizePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "order",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "removeOrderEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "theAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10d50eddb77c475c5c48f3ff36187e86ea698a54b00599a27ff5cc680b878063",
  "receipt": {
    "to": null,
    "from": "0x67bE001A254B81Dc44EaB9F5a7C66889a5c009AE",
    "contractAddress": "0x934d6215B427feb67AB700d62228e2e60C8C9cE8",
    "transactionIndex": 0,
    "gasUsed": "14022713",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd422a26b7ad4b53c69bc2dae2ac6a7042b1a8fb3361864639eb30b9a7fb8ae14",
    "transactionHash": "0x10d50eddb77c475c5c48f3ff36187e86ea698a54b00599a27ff5cc680b878063",
    "logs": [],
    "blockNumber": 1336514,
    "cumulativeGasUsed": "14022713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF02Efd44B57d143c38A329dD299683bf24Cf8aE0",
    6,
    "0x86c21078F22B69d85C3AA32592A09b7DBe12Ae04",
    18
  ],
  "numDeployments": 14,
  "solcInputHash": "8f98947bca76c20753d0229d9fe1f5d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bDecimals\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Base\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPTH\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DECIMAL\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIG_DIGITS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"baseAmountByPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isBuys\",\"type\":\"bool[]\"}],\"name\":\"batchOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"name\":\"enumerateBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leftoverBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leftoverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"normalizePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"order\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"removeOrderEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x233d4bb961bc4b1c35f7d040bbb9e23856ed698cb227564c1b0bc084b38225c6\",\"license\":\"MIT\"},\"contracts/MathHelper.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nlibrary MathHelper {\\n\\n    // full precision multiplication. no overflow\\n    function fullMul (uint x, uint y)\\n    internal pure returns (uint l, uint h)\\n    {\\n       unchecked {\\n       uint mm = mulmod (x, y, type(uint).max );\\n       l = x * y;\\n       h = mm - l;\\n       if (mm < l) h -= 1;\\n       }\\n    }\\n\\n    // return x*y/z\\n    function mulDiv (uint x, uint y, uint z) internal pure returns (uint) {\\n\\n      unchecked {\\n      (uint l, uint h) = fullMul (x, y);\\n       require (h < z);\\n       uint mm = mulmod (x, y, z);\\n       if (mm > l) h -= 1;\\n       l -= mm;\\n       uint pow2 = z & (type(uint).max-z+1);\\n       z /= pow2;\\n       l /= pow2;\\n\\n       l += h * ((type(uint).max-pow2+1) / pow2 + 1);\\n       uint r = 1;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       r *= 2 - z * r;\\n       return l * r;\\n      }\\n    }\\n\\n    // x^n\\n    function pow (uint x, uint n)\\n    internal pure returns (uint r) {\\n       r = 1.0;\\n       while (n > 0) {\\n           if (n % 2 == 1) {\\n              r *= x;\\n              n -= 1;\\n           } else {\\n              x *= x;\\n              n /= 2;\\n           }\\n       }\\n    }\\n}\\n\",\"keccak256\":\"0x66f24d30cffdd1e8a2846fc422ac0ad4f85475b8d89f4dd58d9a62c4cdc6f218\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IERC20Minimal.sol\\\";\\nimport \\\"./MathHelper.sol\\\";\\nimport \\\"./OrderedSet.sol\\\";\\n\\ncontract OrderBook{ \\n\\n   using OrderedSet for OrderedSet.Set;\\n   using OrderedUint256Set for OrderedUint256Set.Set;\\n   event NewEntry(address user, bool isBuy, uint256 price, uint256 amount);\\n   event Transaction(address buyer, address seller, uint256 price, uint256 amount);\\n   uint16 public constant SIG_DIGITS=5;  //# of significant digits\\n   uint16 public constant MAX_DEPTH=100;\\n   uint16 public constant PRICE_DECIMAL=18;\\n\\n   uint public maxPrecision;\\n   uint public leftoverBase;\\n   uint public leftoverToken;\\n\\n   OrderedUint256Set.Set private buyBook;\\n   OrderedUint256Set.Set private sellBook;\\n\\n   mapping(uint256=>OrderedSet.Set) private theBook;\\n   mapping(address=>mapping(uint256=>uint256)) public theAmounts;\\n\\n   // latest transaction price\\n   uint256 curPrice;\\n\\n   IERC20Minimal public Base;\\n   IERC20Minimal public Token;\\n\\n   uint baseDecimals;\\n   uint tokenDecimals;\\n\\n   constructor(IERC20Minimal base, uint bDecimals, IERC20Minimal token, uint tDecimals) public {\\n      Base = base;\\n      Token = token;\\n      maxPrecision = 0;\\n      leftoverBase = 0;\\n      leftoverToken = 0;\\n\\n      baseDecimals = bDecimals;\\n      tokenDecimals = tDecimals;\\n   }\\n\\n   function enumerateBook(bool isBuy, uint depth) view public returns (uint[] memory, uint[] memory) {\\n\\n      require (depth <= MAX_DEPTH, \\\"depth is too deep\\\");\\n\\n      uint[] memory prices = new uint[](depth);\\n      uint[] memory amounts = new uint[](depth);\\n\\n      OrderedUint256Set.Set storage book;\\n      if (isBuy) {\\n         book = buyBook;\\n      } else {\\n         book = sellBook;\\n      }\\n\\n      uint256 tmpPrice = OrderedUint256Set.head(book);\\n      for (uint i = 0; i < depth && tmpPrice != 0; ++i) {\\n         prices[i] = tmpPrice;\\n         address tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n         uint amount = theAmounts[tmpOwner][tmpPrice];\\n         while ((tmpOwner = theBook[tmpPrice].next[tmpOwner]) != address(0)) {\\n            amount += theAmounts[tmpOwner][tmpPrice];\\n         }\\n         amounts[i] = amount; \\n         tmpPrice = book.next[tmpPrice];\\n      }\\n\\n      return (prices, amounts);\\n   }\\n\\n   // order is important\\n   function batchOrder(uint256[] calldata prices, uint256[] calldata amounts, bool[] calldata isBuys) public {\\n      for (uint i; i< prices.length; ++i) {\\n         order(prices[i], amounts[i], isBuys[i]);\\n      }\\n   }\\n   function order(uint256 price, uint256 amount, bool isBuy) public {\\n      price = normalizePrice(price);\\n      if (isBuy) {\\n         buy(price, amount);\\n      } else {\\n         sell(price, amount);\\n      }\\n      updatePrecision(curPrice);\\n   }\\n   function normalizePrice(uint256 price) public view returns (uint256) {\\n      if (maxPrecision != 0) {\\n         uint length = bytes(uint2str(price)).length;\\n         require(length > maxPrecision, \\\"the price is too granular\\\");\\n         price -= price % MathHelper.pow(10, maxPrecision);\\n      }\\n      return price;\\n   }\\n\\n   function baseAmountByPrice(uint256 price, uint256 tokenAmount) public view returns (uint256 baseAmount) {\\n      return MathHelper.mulDiv(tokenAmount, price, MathHelper.pow(10,tokenDecimals));\\n   }\\n\\n   function buy(uint256 price, uint256 amount) internal \\n   {\\n      //calculate the amount of base tokens to be transfered\\n      uint256 baseAmount = baseAmountByPrice(price, amount);\\n      require (baseAmount > 0, \\\"price x amount is too low\\\");\\n\\n      Base.transferFrom(msg.sender, address(this), baseAmount);\\n      uint256 transferAmount = 0;\\n      // case 1, if the order is below the current market\\n      uint256 tmpPrice = OrderedUint256Set.head(sellBook);\\n      if (price < tmpPrice || tmpPrice == 0) {\\n         addOrderEntry(price, amount, true);\\n         return;\\n      } \\n      address tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n      for (uint256 i=0; i < MAX_DEPTH && amount > 0 && price >= tmpPrice; ++i) \\n      {\\n         uint256 orderAmount = theAmounts[tmpOwner][tmpPrice];\\n         uint256 txAmount;\\n         if (orderAmount >= amount) { //meaning the current order can fill\\n            txAmount = amount;\\n         } else {\\n            txAmount = orderAmount;\\n         }\\n         theAmounts[tmpOwner][tmpPrice] -= txAmount;\\n         transferAmount += txAmount;\\n         emit Transaction(tmpOwner, msg.sender, tmpPrice, txAmount);\\n         Base.transfer(tmpOwner, baseAmountByPrice(tmpPrice, txAmount));\\n         baseAmount -= baseAmountByPrice(tmpPrice, txAmount);\\n\\n         amount -= txAmount;\\n         curPrice = tmpPrice;\\n\\n         if (theAmounts[tmpOwner][tmpPrice] == 0) {\\n            OrderedSet.remove(theBook[tmpPrice], tmpOwner);\\n            tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            if (tmpOwner == address(0)) {\\n                OrderedUint256Set.remove(sellBook, tmpPrice);\\n                delete theBook[tmpPrice];\\n                tmpPrice = OrderedUint256Set.head(sellBook);\\n                if (tmpPrice == 0) {\\n                   break;\\n                }\\n                tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            }\\n         }\\n      }\\n\\n      if (amount > 0 && (price < tmpPrice || tmpPrice == 0) ) {\\n         if (addOrderEntry(price, amount, true) == true) {\\n            baseAmount -= baseAmountByPrice(price, amount);\\n         }\\n      }\\n\\n      // refund any left overs\\n      if (baseAmount > 0) {\\n         Base.transfer(msg.sender, baseAmount);\\n      }\\n\\n      // transfer the tokens acquired.\\n      Token.transfer(msg.sender, transferAmount);\\n   }\\n\\n   function sell(uint256 price, uint256 amount) internal \\n   {\\n      Token.transferFrom(msg.sender, address(this), amount);\\n      // case 1, if the order is below the current market\\n      uint256 tmpPrice = OrderedUint256Set.head(buyBook);\\n      uint256 transferAmount = 0;\\n      if (price > tmpPrice || tmpPrice == 0) {\\n         addOrderEntry(price, amount, false);\\n         return;\\n      }\\n\\n      address tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n      for (uint256 i=0; i < MAX_DEPTH && amount > 0 && price <= tmpPrice; ++i) \\n      {\\n         uint256 orderAmount = theAmounts[tmpOwner][tmpPrice];\\n         uint256 txAmount;\\n         if (orderAmount >= amount) { //meaning the current order can fill\\n            txAmount = amount;\\n         } else {\\n            txAmount = orderAmount;\\n         }\\n         theAmounts[tmpOwner][tmpPrice] -= txAmount;\\n         emit Transaction(msg.sender, tmpOwner, tmpPrice, txAmount);\\n         Token.transfer(tmpOwner, txAmount);\\n         amount -= txAmount;\\n         transferAmount += baseAmountByPrice(tmpPrice, txAmount);\\n         curPrice = tmpPrice;\\n\\n         if (theAmounts[tmpOwner][tmpPrice] == 0) {\\n            OrderedSet.remove(theBook[tmpPrice], tmpOwner);\\n            tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            if (tmpOwner == address(0)) {\\n                OrderedUint256Set.remove(buyBook, tmpPrice);\\n                delete theBook[tmpPrice];\\n                tmpPrice = OrderedUint256Set.head(buyBook);\\n                if (tmpPrice == 0) {\\n                   break;\\n                }\\n                tmpOwner = OrderedSet.head(theBook[tmpPrice]);\\n            }\\n         }\\n      }\\n\\n      if (amount > 0 && (price > tmpPrice || tmpPrice == 0) ) {\\n         if (addOrderEntry(price, amount, false) == true) {\\n            amount = 0;\\n         }\\n      }\\n      //refund any remaining amount\\n      if (amount >0) {\\n         Token.transfer(msg.sender, amount);\\n      }\\n\\n      // transfer the proceedings\\n      Base.transfer(msg.sender, transferAmount);\\n   }\\n\\n   function removeOrderEntry(uint256 price) public {\\n      require(theAmounts[msg.sender][price] > 0, \\\"invalid order amount\\\");\\n      OrderedSet.remove(theBook[price], msg.sender);\\n      if (OrderedSet.head(theBook[price]) == address(0)) {\\n         if (price <= OrderedUint256Set.head(buyBook)) {\\n            OrderedUint256Set.remove(buyBook, price);\\n         } else {\\n            OrderedUint256Set.remove(sellBook, price);\\n         }\\n\\n         delete theBook[price];\\n      }\\n   }\\n   function addOrderEntry(uint256 price, uint256 amount, bool isBuy) internal returns(bool) {\\n\\n      uint256 baseAmount = baseAmountByPrice(price, amount);\\n      if (baseAmount == 0) {\\n         return false; // do not add an entry if the amount x price is too low\\n      }\\n\\n      require(price > 0, \\\"price cannot be zero\\\");\\n\\n      uint256 prevPrice = 0;\\n      if (isBuy) {\\n         uint256 tmpPrice = OrderedUint256Set.head(buyBook);\\n         for (uint i = 0; price < tmpPrice && tmpPrice != 0; ++i) {\\n            require (i < MAX_DEPTH, \\\"The order is too deep\\\");\\n            prevPrice = tmpPrice;\\n            tmpPrice = buyBook.next[tmpPrice];\\n         }\\n         if (price != tmpPrice) {\\n            OrderedUint256Set._insert(buyBook, prevPrice, price, tmpPrice);\\n         }\\n\\n         // modifying an existing order will move the order to the back of the queue\\n         if (OrderedSet.contains(theBook[price], msg.sender)) {\\n            OrderedSet.remove(theBook[price], msg.sender);\\n         }\\n         OrderedSet.append(theBook[price], msg.sender);\\n         theAmounts[msg.sender][price] += amount;\\n\\n         updatePrecision(OrderedUint256Set.head(buyBook));\\n\\n      } else {\\n         uint256 tmpPrice = OrderedUint256Set.head(sellBook);\\n         for (uint i = 0; price > tmpPrice && tmpPrice != 0; ++i) {\\n            require (i < MAX_DEPTH, \\\"The order is too deep\\\");\\n            prevPrice = tmpPrice;\\n            tmpPrice = sellBook.next[tmpPrice];\\n         }\\n         if (price != tmpPrice) {\\n            OrderedUint256Set._insert(sellBook, prevPrice, price, tmpPrice);\\n         }\\n\\n         // modifying an existing order will move the order to the back of the queue\\n         if (OrderedSet.contains(theBook[price], msg.sender)) {\\n            OrderedSet.remove(theBook[price], msg.sender);\\n         }\\n\\n         OrderedSet.append(theBook[price], msg.sender);\\n         theAmounts[msg.sender][price] += amount;\\n\\n         updatePrecision(OrderedUint256Set.head(sellBook));\\n      }\\n      return true;\\n   }\\n\\n   function updatePrecision(uint256 price) internal {\\n      uint tmpLength = bytes(uint2str(price)).length;\\n      if (tmpLength > SIG_DIGITS) {\\n         maxPrecision = tmpLength - SIG_DIGITS; \\n      }\\n   }\\n\\n   function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n   function str2uint(string memory s) internal pure returns (uint) {\\n      bytes memory b = bytes(s);\\n      uint result = 0;\\n      for (uint i = 0; i < b.length; i++) { \\n         if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n            result = result * 10 + (uint8(b[i]) - 48); \\n         }\\n      }\\n      return result;\\n   }\\n}\\n\",\"keccak256\":\"0xd1aa8992a114c1e9dd6177861aa03a67ccd5fe4dd9cdda99befb22e907ed7192\",\"license\":\"MIT\"},\"contracts/OrderedSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title OrderedSet\\n * @dev Data structure. It has the properties of a mapping for addresses, but members are ordered\\n * and can be enumerated. Items can be inserted only at the head or the tail, but can be removed\\n * from anywhere. Append, prepend, remove and contains are O(1). Length and enumerate O(N). InsertAfter\\n * and insertBefore could be implemented at O(1).\\n * @author Alberto Cuesta Ca\\u00f1ada\\n */\\nlibrary OrderedSet {\\n\\n    event ItemInserted(address prev, address inserted, address next);\\n    event ItemRemoved(address removed);\\n\\n    struct Set {\\n        mapping (address => address) next;\\n        mapping (address => address) prev;\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new tail.\\n     */\\n    function append(Set storage set, address item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            tail(set),\\n            item,\\n            address(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new head.\\n     */\\n    function prepend(Set storage set, address item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            address(0),\\n            item,\\n            head(set)\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove an item.\\n     */\\n    function remove(Set storage set, address item)\\n        internal\\n    {\\n        require(\\n            item != address(0),\\n            \\\"OrderedSet: Cannot remove the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == true,\\n            \\\"OrderedSet: Cannot remove a non existing item\\\"\\n        );\\n        set.next[set.prev[item]] = set.next[item];\\n        set.prev[set.next[item]] = set.prev[item];\\n        delete set.next[item];\\n        delete set.prev[item];\\n        emit ItemRemoved(item);\\n    }\\n\\n    /**\\n     * @dev Returns the Head.\\n     */\\n    function head(Set storage set)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return set.next[address(0)];\\n    }\\n\\n    /**\\n     * @dev Returns the Tail.\\n     */\\n    function tail(Set storage set)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return set.prev[address(0)];\\n    }\\n\\n    /**\\n     * @dev Returns true if the item is in the set.\\n     */\\n    function contains(Set storage set, address item)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return head(set) == item ||\\n            set.next[item] != address(0) ||\\n            set.prev[item] != address(0);\\n    }\\n\\n    /**\\n     * @dev Return the number of items in the set.\\n     */\\n    function length(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count = 0;\\n        address item = head(set);\\n        while (item != address(0)) {\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Return an array with all items in the set, from Head to Tail.\\n     */\\n    function enumerate(Set storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory items = new address[](length(set));\\n        uint256 count = 0;\\n        address item = head(set);\\n        while (item != address(0)) {\\n            items[count] = item;\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return items;\\n    }\\n\\n    /**\\n     * @dev Insert an item between another two..\\n     */\\n    function _insert(\\n        Set storage set,\\n        address prev_,\\n        address item,\\n        address next_\\n    )\\n        private\\n    {\\n        require(\\n            item != address(0),\\n            \\\"OrderedSet: Cannot insert the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == false,\\n            \\\"OrderedSet: Cannot insert an existing item\\\"\\n        );\\n        set.next[prev_] = item;\\n        set.next[item] = next_;\\n        set.prev[next_] = item;\\n        set.prev[item] = prev_;\\n        emit ItemInserted(prev_, item, next_);\\n    }\\n}\\n\\n/**\\n * @title OrderedUint256Set\\n * @dev Data structure. It has the properties of a mapping for addresses, but members are ordered\\n * and can be enumerated. Items can be inserted only at the head or the tail, but can be removed\\n * from anywhere. Append, prepend, remove and contains are O(1). Length and enumerate O(N). InsertAfter\\n * and insertBefore could be implemented at O(1).\\n * @author Alberto Cuesta Ca\\u00f1ada\\n */\\nlibrary OrderedUint256Set {\\n\\n    event ItemInserted(uint256 prev, uint256 inserted, uint256 next);\\n    event ItemRemoved(uint256 removed);\\n\\n    struct Set {\\n        mapping (uint256 => uint256) next;\\n        mapping (uint256 => uint256) prev;\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new tail.\\n     */\\n    function append(Set storage set, uint256 item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            tail(set),\\n            item,\\n            uint256(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Insert an item as the new head.\\n     */\\n    function prepend(Set storage set, uint256 item)\\n        internal\\n    {\\n        _insert(\\n            set,\\n            uint256(0),\\n            item,\\n            head(set)\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove an item.\\n     */\\n    function remove(Set storage set, uint256 item)\\n        internal\\n    {\\n        require(\\n            item != uint256(0),\\n            \\\"OrderedSet: Cannot remove the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == true,\\n            \\\"OrderedSet: Cannot remove a non existing item\\\"\\n        );\\n        set.next[set.prev[item]] = set.next[item];\\n        set.prev[set.next[item]] = set.prev[item];\\n        delete set.next[item];\\n        delete set.prev[item];\\n        emit ItemRemoved(item);\\n    }\\n\\n    /**\\n     * @dev Returns the Head.\\n     */\\n    function head(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.next[uint256(0)];\\n    }\\n\\n    /**\\n     * @dev Returns the Tail.\\n     */\\n    function tail(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.prev[uint256(0)];\\n    }\\n\\n    /**\\n     * @dev Returns true if the item is in the set.\\n     */\\n    function contains(Set storage set, uint256 item)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return head(set) == item ||\\n            set.next[item] != uint256(0) ||\\n            set.prev[item] != uint256(0);\\n    }\\n\\n    /**\\n     * @dev Return the number of items in the set.\\n     */\\n    function length(Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count = 0;\\n        uint256 item = head(set);\\n        while (item != uint256(0)) {\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev Return an array with all items in the set, from Head to Tail.\\n     */\\n    function enumerate(Set storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory items = new uint256[](length(set));\\n        uint256 count = 0;\\n        uint256 item = head(set);\\n        while (item != uint256(0)) {\\n            items[count] = item;\\n            count += 1;\\n            item = set.next[item];\\n        }\\n        return items;\\n    }\\n\\n    /**\\n     * @dev Insert an item between another two..\\n     */\\n    function _insert(\\n        Set storage set,\\n        uint256 prev_,\\n        uint256 item,\\n        uint256 next_\\n    )\\n       internal \\n    {\\n        require(\\n            item != uint256(0),\\n            \\\"OrderedSet: Cannot insert the empty address\\\"\\n        );\\n        require(\\n            contains(set, item) == false,\\n            \\\"OrderedSet: Cannot insert an existing item\\\"\\n        );\\n        set.next[prev_] = item;\\n        set.next[item] = next_;\\n        set.prev[next_] = item;\\n        set.prev[item] = prev_;\\n        emit ItemInserted(prev_, item, next_);\\n    }\\n}\\n\",\"keccak256\":\"0x763bf4e83c5440cb5b882ce3857594513f883f54db59ac44d49907a14dd8b70f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063681ca2cb11610097578063bbf6cd7411610066578063bbf6cd7414610207578063c241267614610210578063c5849de614610223578063e96183751461022b57600080fd5b8063681ca2cb146101aa5780636dcd1114146101cb578063a27154ba146101f6578063b78ba118146101fe57600080fd5b80633aa47297116100d35780633aa472971461014e57806347d18577146101635780635ea102b0146101765780636617afaf146101a157600080fd5b806317cf77b5146100fa5780631e4ed674146101205780633464ab6a1461013b575b600080fd5b61010d610108366004611a61565b61023e565b6040519081526020015b60405180910390f35b610128600581565b60405161ffff9091168152602001610117565b61010d610149366004611a83565b610260565b61016161015c366004611aaa565b6102f6565b005b610161610171366004611a83565b610330565b600a54610189906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b61010d60015481565b6101bd6101b8366004611ae3565b610414565b604051610117929190611b4a565b61010d6101d9366004611b78565b600860209081526000928352604080842090915290825290205481565b610128606481565b61010d60025481565b61010d60005481565b600b54610189906001600160a01b031681565b610128601281565b610161610239366004611be7565b61063d565b60006102578284610252600a600d546106bd565b61070e565b90505b92915050565b60008054156102f2576000610274836107dd565b51905060005481116102cd5760405162461bcd60e51b815260206004820152601960248201527f74686520707269636520697320746f6f206772616e756c61720000000000000060448201526064015b60405180910390fd5b6102da600a6000546106bd565b6102e49084611c97565b6102ee9084611cc1565b9250505b5090565b6102ff83610260565b92508015610316576103118383610906565b610320565b6103208383610e1a565b61032b60095461129c565b505050565b33600090815260086020908152604080832084845290915290205461038e5760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081bdc99195c88185b5bdd5b9d60621b60448201526064016102c4565b60008181526007602052604090206103a690336112c6565b60008181526007602052604081206103bd906113c1565b6001600160a01b0316141561041157600080526003602052600080516020611ef78339815191525481116103fb576103f66003826113dd565b610406565b6104066005826113dd565b600081905260076020525b50565b606080606483111561045c5760405162461bcd60e51b81526020600482015260116024820152700646570746820697320746f6f206465657607c1b60448201526064016102c4565b60008367ffffffffffffffff81111561047757610477611cd8565b6040519080825280602002602001820160405280156104a0578160200160208202803683370190505b50905060008467ffffffffffffffff8111156104be576104be611cd8565b6040519080825280602002602001820160405280156104e7578160200160208202803683370190505b509050600086156104fa575060036104fe565b5060055b600080805260208290526040812054905b878110801561051d57508115155b1561062c578185828151811061053557610535611cee565b602002602001018181525050600061055e600760008581526020019081526020016000206113c1565b6001600160a01b03811660009081526008602090815260408083208784529091529020549091505b60008481526007602090815260408083206001600160a01b0395861684529091529020549091169081156105e9576001600160a01b03821660009081526008602090815260408083208784529091529020546105e29082611d04565b9050610586565b808684815181106105fc576105fc611cee565b602090810291909101810191909152600094855285905250506040909120549061062581611d1c565b905061050f565b5092945090925050505b9250929050565b60005b858110156106b4576106a487878381811061065d5761065d611cee565b9050602002013586868481811061067657610676611cee565b9050602002013585858581811061068f5761068f611cee565b905060200201602081019061015c9190611d37565b6106ad81611d1c565b9050610640565b50505050505050565b60015b811561025a576106d1600283611c97565b600114156106f7576106e38382611d54565b90506106f0600183611cc1565b91506106c0565b6107018380611d54565b92506106f0600283611d73565b600080600061071d8686611494565b9150915083811061072d57600080fd5b6000848061073d5761073d611c81565b868809905082811115610751576001820391505b91829003916001851901851680868161076c5761076c611c81565b04955080848161077e5761077e611c81565b0493508060018119018161079457610794611c81565b04600101929092029290920160028581038087028203028087028203028087028203028087028203028087028203028087028203028087029091030202925050505b9392505050565b6060816108015750506040805180820190915260018152600360fc1b602082015290565b8160005b811561082b578061081581611d1c565b91506108249050600a83611d73565b9150610805565b60008167ffffffffffffffff81111561084657610846611cd8565b6040519080825280601f01601f191660200182016040528015610870576020820181803683370190505b509050815b85156108fd57610886600182611cc1565b90506000610895600a88611d73565b6108a090600a611d54565b6108aa9088611cc1565b6108b5906030611d87565b905060008160f81b9050808484815181106108d2576108d2611cee565b60200101906001600160f81b031916908160001a9053506108f4600a89611d73565b97505050610875565b50949350505050565b6000610912838361023e565b9050600081116109645760405162461bcd60e51b815260206004820152601960248201527f7072696365207820616d6f756e7420697320746f6f206c6f770000000000000060448201526064016102c4565b600a546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156109b657600080fd5b505af11580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190611dac565b5060008080526005602052600080516020611f178339815191525480851080610a15575080155b15610a2e57610a26858560016114c1565b505050505050565b6000818152600760205260408120610a45906113c1565b905060005b606481108015610a5a5750600086115b8015610a665750828710155b15610cc0576001600160a01b038216600090815260086020908152604080832086845290915281205490878210610a9e575086610aa1565b50805b6001600160a01b038416600090815260086020908152604080832088845290915281208054839290610ad4908490611cc1565b90915550610ae490508187611d04565b604080516001600160a01b0387168152336020820152908101879052606081018390529096507ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a1600a546001600160a01b031663a9059cbb85610b53888561023e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd19190611dac565b50610bdc858261023e565b610be69088611cc1565b9650610bf28189611cc1565b60098690556001600160a01b0385166000908152600860209081526040808320898452909152902054909850610cad576000858152600760205260409020610c3a90856112c6565b6000858152600760205260409020610c51906113c1565b93506001600160a01b038416610cad57610c6c6005866113dd565b600080526005602052600080516020611f1783398151915254945084610c93575050610cc0565b6000858152600760205260409020610caa906113c1565b93505b505080610cb990611d1c565b9050610a4a565b50600085118015610cd8575081861080610cd8575081155b15610d0a57610ce9868660016114c1565b151560011415610d0a57610cfd868661023e565b610d079085611cc1565b93505b8315610d9657600a5460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190611dac565b505b600b5460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190611dac565b600b546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea49190611dac565b5060008080526003602052600080516020611ef7833981519152549081841180610ecc575081155b15610ee457610edd848460006114c1565b5050505050565b6000828152600760205260408120610efb906113c1565b905060005b606481108015610f105750600085115b8015610f1c5750838611155b15611154576001600160a01b038216600090815260086020908152604080832087845290915281205490868210610f54575085610f57565b50805b6001600160a01b038416600090815260086020908152604080832089845290915281208054839290610f8a908490611cc1565b9091555050604080513381526001600160a01b0386166020820152908101879052606081018290527ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e16581919060800160405180910390a1600b5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561102d57600080fd5b505af1158015611041573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110659190611dac565b506110708188611cc1565b965061107c868261023e565b6110869086611d04565b60098790556001600160a01b03851660009081526008602090815260408083208a84529091529020549095506111415760008681526007602052604090206110ce90856112c6565b60008681526007602052604090206110e5906113c1565b93506001600160a01b038416611141576111006003876113dd565b600080526003602052600080516020611ef783398151915254955085611127575050611154565b600086815260076020526040902061113e906113c1565b93505b50508061114d90611d1c565b9050610f00565b5060008411801561116c57508285118061116c575082155b1561118c5761117d858560006114c1565b15156001141561118c57600093505b831561121857600b5460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156111de57600080fd5b505af11580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190611dac565b505b600a5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561126457600080fd5b505af1158015611278573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190611dac565b60006112a7826107dd565b51905060058111156112c2576112be600582611cc1565b6000555b5050565b6001600160a01b0381166112ec5760405162461bcd60e51b81526004016102c490611dc9565b6112f682826117da565b15156001146113175760405162461bcd60e51b81526004016102c490611e14565b6001600160a01b038181166000818152602085815260408083208054600189018085528386208054891687528a86528487208054938a166001600160a01b0319948516179055805484548a16885291865284872080549290991691831691909117909755938590528054841690558454909216909355519081527ff4bab09e0bfc491adb818cac1805d51def9f0ec39825ffb0e42aeaa46494efce91015b60405180910390a15050565b600080805260209190915260409020546001600160a01b031690565b806113fa5760405162461bcd60e51b81526004016102c490611dc9565b6114048282611849565b15156001146114255760405162461bcd60e51b81526004016102c490611e14565b60008181526020838152604080832080546001870180855283862080548752888652848720839055805492875290855283862091909155858552908490559290925590518281527fa54eda4149a0fb9258911733973ecf1f6762357ed371fc6d1e63123bbce23bed91016113b5565b60008080600019848609905083850292508281039150828110156114b9576001820391505b509250929050565b6000806114ce858561023e565b9050806114df5760009150506107d6565b600085116115265760405162461bcd60e51b815260206004820152601460248201527370726963652063616e6e6f74206265207a65726f60601b60448201526064016102c4565b600083156116805760008080526003602052600080516020611ef783398151915254905b818810801561155857508115155b156115c757606481106115a55760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016102c4565b6000828152600360205260409020549192506115c081611d1c565b905061154a565b508087146115dc576115dc6003838984611891565b60008781526007602052604090206115f490336117da565b1561161157600087815260076020526040902061161190336112c6565b6000878152600760205260409020611629903361194e565b3360009081526008602090815260408083208a845290915281208054889290611653908490611d04565b9091555050600080526003602052600080516020611ef78339815191525461167a9061129c565b506117ce565b60008080526005602052600080516020611f1783398151915254905b81881180156116aa57508115155b1561171957606481106116f75760405162461bcd60e51b81526020600482015260156024820152740546865206f7264657220697320746f6f206465657605c1b60448201526064016102c4565b60008281526005602052604090205491925061171281611d1c565b905061169c565b5080871461172e5761172e6005838984611891565b600087815260076020526040902061174690336117da565b1561176357600087815260076020526040902061176390336112c6565b600087815260076020526040902061177b903361194e565b3360009081526008602090815260408083208a8452909152812080548892906117a5908490611d04565b9091555050600080526005602052600080516020611f17833981519152546117cc9061129c565b505b50600195945050505050565b6000816001600160a01b03166117ef846113c1565b6001600160a01b0316148061181d57506001600160a01b038281166000908152602085905260409020541615155b806102575750506001600160a01b03908116600090815260019290920160205260409091205416151590565b600080805260208390526040812054821480611872575060008281526020849052604090205415155b8061025757505060009081526001919091016020526040902054151590565b816118ae5760405162461bcd60e51b81526004016102c490611e61565b6118b88483611849565b156118d55760405162461bcd60e51b81526004016102c490611eac565b6000838152602085815260408083208590558483528083208490558383526001870182528083208590558483529182902085905581518581529081018490529081018290527f9472b5ff40cc3a3b93e125bc459af0b3415681e38a54902660ed54d8d105eecf906060015b60405180910390a150505050565b60008080526001830160205260409020546112c29083906001600160a01b03168360006001600160a01b0382166119975760405162461bcd60e51b81526004016102c490611e61565b6119a184836117da565b156119be5760405162461bcd60e51b81526004016102c490611eac565b6001600160a01b0383811660008181526020878152604080832080548887166001600160a01b0319918216811790925581855282852080549789169782168817905586855260018b018452828520805482168317905581855293829020805490941685179093558051938452908301919091528101919091527f5c1aff99e7fa2e4a6b70e175249efcb3fbf80573704b56c6379d05dffea9f83890606001611940565b60008060408385031215611a7457600080fd5b50508035926020909101359150565b600060208284031215611a9557600080fd5b5035919050565b801515811461041157600080fd5b600080600060608486031215611abf57600080fd5b83359250602084013591506040840135611ad881611a9c565b809150509250925092565b60008060408385031215611af657600080fd5b8235611b0181611a9c565b946020939093013593505050565b600081518084526020808501945080840160005b83811015611b3f57815187529582019590820190600101611b23565b509495945050505050565b604081526000611b5d6040830185611b0f565b8281036020840152611b6f8185611b0f565b95945050505050565b60008060408385031215611b8b57600080fd5b82356001600160a01b0381168114611b0157600080fd5b60008083601f840112611bb457600080fd5b50813567ffffffffffffffff811115611bcc57600080fd5b6020830191508360208260051b850101111561063657600080fd5b60008060008060008060608789031215611c0057600080fd5b863567ffffffffffffffff80821115611c1857600080fd5b611c248a838b01611ba2565b90985096506020890135915080821115611c3d57600080fd5b611c498a838b01611ba2565b90965094506040890135915080821115611c6257600080fd5b50611c6f89828a01611ba2565b979a9699509497509295939492505050565b634e487b7160e01b600052601260045260246000fd5b600082611ca657611ca6611c81565b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015611cd357611cd3611cab565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008219821115611d1757611d17611cab565b500190565b6000600019821415611d3057611d30611cab565b5060010190565b600060208284031215611d4957600080fd5b81356107d681611a9c565b6000816000190483118215151615611d6e57611d6e611cab565b500290565b600082611d8257611d82611c81565b500490565b600060ff821660ff84168060ff03821115611da457611da4611cab565b019392505050565b600060208284031215611dbe57600080fd5b81516107d681611a9c565b6020808252602b908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602d908201527f4f7264657265645365743a2043616e6e6f742072656d6f76652061206e6f6e2060408201526c6578697374696e67206974656d60981b606082015260800190565b6020808252602b908201527f4f7264657265645365743a2043616e6e6f7420696e736572742074686520656d60408201526a707479206164647265737360a81b606082015260800190565b6020808252602a908201527f4f7264657265645365743a2043616e6e6f7420696e7365727420616e206578696040820152697374696e67206974656d60b01b60608201526080019056fe3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bca26469706673582212208bd814190ec0a5369876730373cafabc1dc50efce7e8d9965a0a4bd08473e10564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1791,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "maxPrecision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1793,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "leftoverBase",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1795,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "leftoverToken",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1798,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "buyBook",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Set)3602_storage"
      },
      {
        "astId": 1801,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "sellBook",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Set)3602_storage"
      },
      {
        "astId": 1806,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "theBook",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Set)3213_storage)"
      },
      {
        "astId": 1812,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "theAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1814,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "curPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1817,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "Base",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20Minimal)1489"
      },
      {
        "astId": 1820,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "Token",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20Minimal)1489"
      },
      {
        "astId": 1822,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "baseDecimals",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1824,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Minimal)1489": {
        "encoding": "inplace",
        "label": "contract IERC20Minimal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Set)3213_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderedSet.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)3213_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)3213_storage": {
        "encoding": "inplace",
        "label": "struct OrderedSet.Set",
        "members": [
          {
            "astId": 3208,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 3212,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "prev",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3602_storage": {
        "encoding": "inplace",
        "label": "struct OrderedUint256Set.Set",
        "members": [
          {
            "astId": 3597,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 3601,
            "contract": "contracts/OrderBook.sol:OrderBook",
            "label": "prev",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}